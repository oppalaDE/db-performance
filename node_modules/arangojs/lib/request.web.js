"use strict";
/// <reference lib="dom" />
Object.defineProperty(exports, "__esModule", { value: true });
exports.createRequest = exports.isBrowser = void 0;
const btoa_1 = require("./btoa");
const omit_1 = require("./omit");
const xhr_1 = require("./xhr");
exports.isBrowser = true;
/**
 * @internal
 */
function errorToJSON() {
    return {
        error: true,
        message: this.message,
    };
}
/**
 * Create a function for performing requests against a given host.
 *
 * @param baseUrl - Base URL of the host, i.e. protocol, port and domain name.
 * @param agentOptions - Options to use for performing requests.
 *
 * @param baseUrl
 * @param agentOptions
 *
 * @internal
 */
function createRequest(baseUrl, agentOptions) {
    const base = new URL(baseUrl);
    const auth = (0, btoa_1.base64Encode)(`${base.username || "root"}:${base.password}`);
    base.username = "";
    base.password = "";
    const options = (0, omit_1.omit)(agentOptions, ["maxSockets"]);
    return function request({ method, url: reqUrl, headers, body, timeout, expectBinary, }, cb) {
        const url = new URL(reqUrl.pathname, base);
        if (reqUrl.search) {
            if (!base.search)
                url.search = reqUrl.search.slice(1);
            else
                url.search = `${base.search}&${reqUrl.search.slice(1)}`;
        }
        else
            url.search = base.search;
        if (!headers["authorization"]) {
            headers["authorization"] = `Basic ${auth}`;
        }
        let callback = (err, res) => {
            callback = () => undefined;
            cb(err, res);
        };
        const req = (0, xhr_1.default)({
            useXDR: true,
            withCredentials: true,
            ...options,
            responseType: expectBinary ? "blob" : "text",
            url: String(url),
            body,
            method,
            headers,
            timeout,
        }, (err, res) => {
            if (!err) {
                const response = res;
                response.request = req;
                if (!response.body)
                    response.body = "";
                if (options.after) {
                    options.after(null, response);
                }
                callback(null, response);
            }
            else {
                const error = err;
                error.request = req;
                error.toJSON = errorToJSON;
                if (options.after) {
                    options.after(error);
                }
                callback(error);
            }
        });
        if (options.before) {
            options.before(req);
        }
    };
}
exports.createRequest = createRequest;
//# sourceMappingURL=request.web.js.map
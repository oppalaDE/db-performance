{"version":3,"file":"multipart.js","sourceRoot":"","sources":["../../src/lib/multipart.ts"],"names":[],"mappings":";AAAA;;;;;GAKG;;;AAEH,mCAAkC;AAalC,8DAA8D;AAC9D,MAAM,SAAS,GAAG,OAAO,CAAC,YAAY,CAAqB,CAAC;AAiB5D;;GAEG;AACI,KAAK,UAAU,MAAM,CAAC,MAAc;IACzC,MAAM,IAAI,GAAG,IAAI,SAAS,EAAE,CAAC;IAC7B,KAAK,MAAM,GAAG,IAAI,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE;QACrC,IAAI,KAAK,GAAG,MAAM,CAAC,GAAG,CAAC,CAAC;QACxB,IAAI,KAAK,KAAK,SAAS;YAAE,SAAS;QAClC,IACE,CAAC,CAAC,KAAK,YAAY,iBAAQ,CAAC;YAC5B,CAAC,CAAC,KAAK,YAAY,MAAM,CAAC,MAAM,CAAC;YACjC,CAAC,OAAO,KAAK,KAAK,QAAQ,IAAI,OAAO,KAAK,KAAK,UAAU,CAAC,EAC1D;YACA,KAAK,GAAG,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;SAC/B;QACD,IAAI,CAAC,MAAM,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;KACzB;IACD,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,MAAM,EAAE,CAAC;IACjC,MAAM,OAAO,GAAG,IAAI,CAAC,UAAU,EAAE,CAAC;IAClC,OAAO,OAAO,CAAC,mBAAmB,CAAC,CAAC;IACpC,OAAO,EAAE,IAAI,EAAE,OAAO,EAAE,CAAC;AAC3B,CAAC;AAlBD,wBAkBC","sourcesContent":["/**\n * Utility function for constructing a multipart form in Node.js.\n *\n * @packageDocumentation\n * @internal\n */\n\nimport { Readable } from \"stream\";\nimport { Headers } from \"../connection\";\n\ndeclare class MultiPart {\n  append(\n    field: string,\n    value: any,\n    options?: { filename?: string; contentType?: string }\n  ): this;\n  getHeaders(): Headers;\n  buffer(): Promise<Buffer>;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-var-requires\nconst Multipart = require(\"multi-part\") as typeof MultiPart;\n\n/**\n * @internal\n */\nexport type Fields = {\n  [key: string]: any;\n};\n\n/**\n * @internal\n */\nexport interface MultipartRequest {\n  headers?: Headers;\n  body: Buffer;\n}\n\n/**\n * @internal\n */\nexport async function toForm(fields: Fields): Promise<MultipartRequest> {\n  const form = new Multipart();\n  for (const key of Object.keys(fields)) {\n    let value = fields[key];\n    if (value === undefined) continue;\n    if (\n      !(value instanceof Readable) &&\n      !(value instanceof global.Buffer) &&\n      (typeof value === \"object\" || typeof value === \"function\")\n    ) {\n      value = JSON.stringify(value);\n    }\n    form.append(key, value);\n  }\n  const body = await form.buffer();\n  const headers = form.getHeaders();\n  delete headers[\"transfer-encoding\"];\n  return { body, headers };\n}\n"]}
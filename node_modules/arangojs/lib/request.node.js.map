{"version":3,"file":"request.node.js","sourceRoot":"","sources":["../../src/lib/request.node.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Node.js implementation of the HTTP(S) request function.\n *\n * @packageDocumentation\n * @internal\n */\n\nimport {\n  Agent as HttpAgent,\n  AgentOptions,\n  ClientRequest,\n  ClientRequestArgs,\n  IncomingMessage,\n  request as httpRequest,\n} from \"http\";\nimport { Agent as HttpsAgent, request as httpsRequest } from \"https\";\nimport { parse as parseUrl, UrlWithStringQuery } from \"url\";\nimport { Headers, RequestInterceptors } from \"../connection\";\nimport { SystemError } from \"../error\";\nimport { base64Encode } from \"./btoa\";\nimport { Errback } from \"./errback\";\nimport { joinPath } from \"./joinPath\";\nimport { omit } from \"./omit\";\n\n/**\n * @internal\n */\nfunction systemErrorToJSON(this: SystemError) {\n  return {\n    error: true,\n    errno: this.errno,\n    code: this.code,\n    syscall: this.syscall,\n  };\n}\n\n/**\n * @internal\n */\nexport interface ArangojsResponse extends IncomingMessage {\n  request: ClientRequest;\n  body?: any;\n  arangojsHostUrl?: string;\n}\n\n/**\n * @internal\n */\nexport interface ArangojsError extends Error {\n  request: ClientRequest;\n  toJSON: () => Record<string, any>;\n}\n\n/**\n * @internal\n */\nexport type RequestOptions = {\n  method: string;\n  url: { pathname: string; search?: string };\n  headers: Headers;\n  body: any;\n  expectBinary: boolean;\n  timeout?: number;\n};\n\n/**\n * @internal\n */\nexport type RequestFunction = {\n  (options: RequestOptions, cb: Errback<ArangojsResponse>): void;\n  close?: () => void;\n};\n\n/**\n * @internal\n */\nexport const isBrowser = false;\n\n/**\n * Create a function for performing requests against a given host.\n *\n * @param baseUrl - Base URL of the host, i.e. protocol, port and domain name.\n * @param agentOptions - Options to use for creating the agent.\n * @param agent - Agent to use for performing requests.\n *\n * @internal\n */\nexport function createRequest(\n  baseUrl: string,\n  agentOptions: AgentOptions & RequestInterceptors,\n  agent?: any\n): RequestFunction {\n  const baseUrlParts = parseUrl(baseUrl) as Partial<UrlWithStringQuery>;\n  if (!baseUrlParts.protocol) {\n    throw new Error(`Invalid URL (no protocol): ${baseUrl}`);\n  }\n  const isTls = baseUrlParts.protocol === \"https:\";\n  let socketPath: string | undefined;\n  if (baseUrl.startsWith(`${baseUrlParts.protocol}//unix:`)) {\n    if (!baseUrlParts.pathname) {\n      throw new Error(\n        `Unix socket URL must be in the format http://unix:/socket/path, http+unix:///socket/path or unix:///socket/path not ${baseUrl}`\n      );\n    }\n    const i = baseUrlParts.pathname.indexOf(\":\");\n    if (i === -1) {\n      socketPath = baseUrlParts.pathname;\n      delete baseUrlParts.pathname;\n    } else {\n      socketPath = baseUrlParts.pathname.slice(0, i);\n      baseUrlParts.pathname = baseUrlParts.pathname.slice(i + 1);\n      if (baseUrlParts.pathname === \"\") {\n        delete baseUrlParts.pathname;\n      }\n    }\n  }\n  if (socketPath && !socketPath.replace(/\\//g, \"\").length) {\n    throw new Error(`Invalid URL (empty unix socket path): ${baseUrl}`);\n  }\n  if (!agent) {\n    const opts = omit(agentOptions, [\"before\", \"after\"]);\n    if (isTls) agent = new HttpsAgent(opts);\n    else agent = new HttpAgent(opts);\n  }\n  return Object.assign(\n    function request(\n      { method, url, headers, body, timeout }: RequestOptions,\n      callback: Errback<ArangojsResponse>\n    ) {\n      let path = baseUrlParts.pathname\n        ? url.pathname\n          ? joinPath(baseUrlParts.pathname, url.pathname)\n          : baseUrlParts.pathname\n        : url.pathname;\n      const search = url.search\n        ? baseUrlParts.search\n          ? `${baseUrlParts.search}&${url.search.slice(1)}`\n          : url.search\n        : baseUrlParts.search;\n      if (search) path += search;\n      if (body && !headers[\"content-length\"]) {\n        headers[\"content-length\"] = String(Buffer.byteLength(body));\n      }\n      if (!headers[\"authorization\"]) {\n        headers[\"authorization\"] = `Basic ${base64Encode(\n          baseUrlParts.auth || \"root:\"\n        )}`;\n      }\n      const options: ClientRequestArgs = { path, method, headers, agent };\n      if (socketPath) {\n        options.socketPath = socketPath;\n      } else {\n        options.host = baseUrlParts.hostname;\n        options.port = baseUrlParts.port;\n      }\n      let called = false;\n      try {\n        const req = (isTls ? httpsRequest : httpRequest)(\n          options,\n          (res: IncomingMessage) => {\n            const data: Buffer[] = [];\n            res.on(\"data\", (chunk) => data.push(chunk as Buffer));\n            res.on(\"end\", () => {\n              const response = res as ArangojsResponse;\n              response.request = req;\n              response.body = Buffer.concat(data);\n              if (called) return;\n              called = true;\n              if (agentOptions.after) {\n                agentOptions.after(null, response);\n              }\n              callback(null, response);\n            });\n          }\n        );\n        if (timeout) {\n          req.setTimeout(timeout);\n        }\n        req.on(\"timeout\", () => {\n          req.abort();\n        });\n        req.on(\"error\", (err) => {\n          const error = err as ArangojsError;\n          error.request = req;\n          error.toJSON = systemErrorToJSON;\n          if (called) return;\n          called = true;\n          if (agentOptions.after) {\n            agentOptions.after(error);\n          }\n          callback(error);\n        });\n        if (body) req.write(body);\n        if (agentOptions.before) {\n          agentOptions.before(req);\n        }\n        req.end();\n      } catch (e: any) {\n        if (called) return;\n        called = true;\n        setTimeout(() => {\n          callback(e);\n        }, 0);\n      }\n    },\n    {\n      close() {\n        agent.destroy();\n      },\n    }\n  );\n}\n"]}
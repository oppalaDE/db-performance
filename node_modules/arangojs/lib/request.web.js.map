{"version":3,"file":"request.web.js","sourceRoot":"","sources":["../../src/lib/request.web.ts"],"names":[],"mappings":"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","sourcesContent":["/// <reference lib=\"dom\" />\n\n/**\n * Node.js implementation of the HTTP(S) request function.\n *\n * @packageDocumentation\n * @internal\n */\n\nimport { RequestInterceptors, XhrOptions } from \"../connection\";\nimport { base64Encode } from \"./btoa\";\nimport { Errback } from \"./errback\";\nimport { omit } from \"./omit\";\nimport {\n  ArangojsError,\n  ArangojsResponse,\n  RequestOptions\n} from \"./request.node\";\nimport xhr from \"./xhr\";\n\nexport const isBrowser = true;\n\n/**\n * @internal\n */\nfunction errorToJSON(this: Error) {\n  return {\n    error: true,\n    message: this.message,\n  };\n}\n\n/**\n * Create a function for performing requests against a given host.\n *\n * @param baseUrl - Base URL of the host, i.e. protocol, port and domain name.\n * @param agentOptions - Options to use for performing requests.\n *\n * @param baseUrl\n * @param agentOptions\n *\n * @internal\n */\nexport function createRequest(\n  baseUrl: string,\n  agentOptions: XhrOptions & RequestInterceptors\n) {\n  const base = new URL(baseUrl);\n  const auth = base64Encode(`${base.username || \"root\"}:${base.password}`);\n  base.username = \"\";\n  base.password = \"\";\n  const options = omit(agentOptions, [\"maxSockets\"]);\n  return function request(\n    {\n      method,\n      url: reqUrl,\n      headers,\n      body,\n      timeout,\n      expectBinary,\n    }: RequestOptions,\n    cb: Errback<ArangojsResponse>\n  ) {\n    const url = new URL(reqUrl.pathname, base);\n    if (reqUrl.search) {\n      if (!base.search) url.search = reqUrl.search.slice(1);\n      else url.search = `${base.search}&${reqUrl.search.slice(1)}`\n    } else url.search = base.search;\n    if (!headers[\"authorization\"]) {\n      headers[\"authorization\"] = `Basic ${auth}`;\n    }\n\n    let callback: Errback<ArangojsResponse> = (err, res) => {\n      callback = () => undefined;\n      cb(err, res);\n    };\n    const req = xhr(\n      {\n        useXDR: true,\n        withCredentials: true,\n        ...options,\n        responseType: expectBinary ? \"blob\" : \"text\",\n        url: String(url),\n        body,\n        method,\n        headers,\n        timeout,\n      },\n      (err: Error | null, res?: any) => {\n        if (!err) {\n          const response = res as ArangojsResponse;\n          response.request = req;\n          if (!response.body) response.body = \"\";\n          if (options.after) {\n            options.after(null, response);\n          }\n          callback(null, response as ArangojsResponse);\n        } else {\n          const error = err as ArangojsError;\n          error.request = req;\n          error.toJSON = errorToJSON;\n          if (options.after) {\n            options.after(error);\n          }\n          callback(error);\n        }\n      }\n    );\n    if (options.before) {\n      options.before(req);\n    }\n  };\n}\n"]}